"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2021],{2071:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var r=a(8168),o=(a(6540),a(5680));const n={title:"Staking Glossary",slug:"/staked-compute/staking-glossary"},i=void 0,l={unversionedId:"staked-compute/staking-glossary",id:"staked-compute/staking-glossary",title:"Staking Glossary",description:"The content on this page is currently under review and subject to change.",source:"@site/docs/staked-compute/staking-glossary.mdx",sourceDirName:"staked-compute",slug:"/staked-compute/staking-glossary",permalink:"/staked-compute/staking-glossary",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/staked-compute/staking-glossary.mdx",tags:[],version:"current",frontMatter:{title:"Staking Glossary",slug:"/staked-compute/staking-glossary"},sidebar:"docs",previous:{title:"Staking FAQ",permalink:"/staked-compute/staking-faq"},next:{title:"Acurast Orchestrator",permalink:"/acurast-orchestrator"}},s={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Compute Provider",id:"compute-provider",level:3},{value:"Committer",id:"committer",level:3},{value:"Delegator",id:"delegator",level:3},{value:"Stake",id:"stake",level:3},{value:"Compute Metrics",id:"compute-metrics",level:2},{value:"Benchmark Metrics",id:"benchmark-metrics",level:3},{value:"Current Compute",id:"current-compute",level:3},{value:"Committed Compute",id:"committed-compute",level:3},{value:"Stake Health",id:"stake-health",level:3},{value:"Staking Mechanics",id:"staking-mechanics",level:2},{value:"Cooldown",id:"cooldown",level:3},{value:"Unstake",id:"unstake",level:3},{value:"Finalize",id:"finalize",level:3},{value:"Recommit",id:"recommit",level:3},{value:"Rewards &amp; Penalties",id:"rewards--penalties",level:2},{value:"Total Staking Rewards",id:"total-staking-rewards",level:3},{value:"Autocompounding",id:"autocompounding",level:3},{value:"Claiming rewards",id:"claiming-rewards",level:3},{value:"Slashing",id:"slashing",level:3},{value:"Slasher",id:"slasher",level:3},{value:"Slasher&#39;s Reward",id:"slashers-reward",level:3},{value:"Delegation",id:"delegation",level:2},{value:"Redelegate",id:"redelegate",level:3},{value:"Delegation Fee",id:"delegation-fee",level:3},{value:"Delegation Capacity",id:"delegation-capacity",level:3},{value:"Time &amp; Measurement",id:"time--measurement",level:2},{value:"Epoch",id:"epoch",level:3},{value:"Heartbeat",id:"heartbeat",level:3}],c={toc:d},u="wrapper";function m({components:e,...t}){return(0,o.yg)(u,(0,r.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("admonition",{title:"Under Review",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"The content on this page is currently under review and subject to change.")),(0,o.yg)("h1",{id:"staking-glossary"},"Staking Glossary"),(0,o.yg)("h2",{id:"core-concepts"},"Core Concepts"),(0,o.yg)("h3",{id:"compute-provider"},"Compute Provider"),(0,o.yg)("p",null,"(aka Manager): A user that runs the Acurast processor app on one or more phones."),(0,o.yg)("h3",{id:"committer"},"Committer"),(0,o.yg)("p",null,"(aka Staker, Manager, Compute Provider): A user that is a Compute Provider who commits compute by Staking."),(0,o.yg)("h3",{id:"delegator"},"Delegator"),(0,o.yg)("p",null,"Users that are Staking Acurast tokens with Committer by attaching their stake to a Committer's stake."),(0,o.yg)("h3",{id:"stake"},"Stake"),(0,o.yg)("p",null,"A Committers commitment, backed by an amount of Committed Compute, an amount of Acurast tokens and a Cooldown period of a chosen length."),(0,o.yg)("h2",{id:"compute-metrics"},"Compute Metrics"),(0,o.yg)("h3",{id:"benchmark-metrics"},"Benchmark Metrics"),(0,o.yg)("p",null,"Four standardized tests that measure a device's computational capacity: CPU Single Core (0.2307 weight), CPU Multi Core (0.2307 weight), RAM Size (0.4615 weight), and Storage Size (0.0769 weight). These metrics are measured during every device heartbeat and reported on-chain to determine Current Compute and calculate rewards and slashing."),(0,o.yg)("h3",{id:"current-compute"},"Current Compute"),(0,o.yg)("p",null,"The amount of compute that was measured across all processors in the last epoch for a specific Compute Provider. During that epoch, all devices ideally had written three heartbeats including three benchmark results. In order to determine the Current Compute for an epoch the ??? latest ??? recorded heartbeat off all devices are being used."),(0,o.yg)("h3",{id:"committed-compute"},"Committed Compute"),(0,o.yg)("p",null,"The amount of compute a Compute Provider commits to providing during the lifetime of a Stake, including its Cooldown period."),(0,o.yg)("h3",{id:"stake-health"},"Stake Health"),(0,o.yg)("p",null,"The health state of a Stake, regarding the Current Compute in relation to the Committed Compute."),(0,o.yg)("h2",{id:"staking-mechanics"},"Staking Mechanics"),(0,o.yg)("h3",{id:"cooldown"},"Cooldown"),(0,o.yg)("p",null,"A countdown triggered when a user chooses to exit their stake. During the cooldown period, reward weights are reduced to 50% while slashing risk remains at 100%. When the cooldown period ends, the stake can be finalized and tokens become unlocked and transferable again. The cooldown is measured in blocks and ranges differ by network: Mainnet (28 days to ~3.68 years) and Canary (1 hour to 48 hours). See ",(0,o.yg)("a",{parentName:"p",href:"/staked-compute/mainnet-vs-canary"},"Mainnet vs. Canary")," for details."),(0,o.yg)("h3",{id:"unstake"},"Unstake"),(0,o.yg)("p",null,"The process of signaling the intention to end a Stake. Unstaking triggers the Cooldown."),(0,o.yg)("h3",{id:"finalize"},"Finalize"),(0,o.yg)("p",null,'The process of withdrawing a stake after the cooldown period has ended, returning the unlocked tokens and any unclaimed rewards to the staker or delegator. Also called "claiming a finalized stake."'),(0,o.yg)("h3",{id:"recommit"},"Recommit"),(0,o.yg)("p",null,"After starting cooldown on a stake, users can choose to recommit if they change their mind. Recommitting immediately restores reward weight and vote weight to 100% and resets the cooldown countdown, returning the stake to its active state."),(0,o.yg)("h2",{id:"rewards--penalties"},"Rewards & Penalties"),(0,o.yg)("h3",{id:"total-staking-rewards"},"Total Staking Rewards"),(0,o.yg)("p",null,"The rewards paid to all Stakers by the inflation of the Acurast Blockchain per epoch."),(0,o.yg)("h3",{id:"autocompounding"},"Autocompounding"),(0,o.yg)("p",null,"Adding accrued rewards to the existing Stake instead of claiming them."),(0,o.yg)("h3",{id:"claiming-rewards"},"Claiming rewards"),(0,o.yg)("p",null,"Requesting the accrued rewards to be sent to the Staker or Delegator."),(0,o.yg)("h3",{id:"slashing"},"Slashing"),(0,o.yg)("p",null,"A penalty that can be forced upon Committers, if they do not succeed in keeping up the amount of Compute they committed to (the Committed Compute)."),(0,o.yg)("h3",{id:"slasher"},"Slasher"),(0,o.yg)("p",null,"A user that triggers Slashing for a Stake that did not provide enough Compute to match its Committed Compute."),(0,o.yg)("h3",{id:"slashers-reward"},"Slasher's Reward"),(0,o.yg)("p",null,"A percentage of the slashed amount, that is given to the Slasher as a reward for detecting a violated compute commitment."),(0,o.yg)("h2",{id:"delegation"},"Delegation"),(0,o.yg)("h3",{id:"redelegate"},"Redelegate"),(0,o.yg)("p",null,"Detaching a running Delegation from one Committer and attaching it to a new Committer. Can only be done if the new Committer shares the exact same or higher parameters (Committed Compute, Staked Tokens, Cooldown duration) than the previous Committer and is not in Cooldown."),(0,o.yg)("h3",{id:"delegation-fee"},"Delegation Fee"),(0,o.yg)("p",null,"A fee Committers can set once upon creating a Stake and will receive from the rewards of the Delegations attached to their stake. The Delegation fee can not change during the lifetime of a Stake."),(0,o.yg)("h3",{id:"delegation-capacity"},"Delegation Capacity"),(0,o.yg)("p",null,"The amount of delegations a Committer can accept."),(0,o.yg)("h2",{id:"time--measurement"},"Time & Measurement"),(0,o.yg)("h3",{id:"epoch"},"Epoch"),(0,o.yg)("p",null,"One epoch equals 900 blocks (approximately 1.5 hours)."),(0,o.yg)("h3",{id:"heartbeat"},"Heartbeat"),(0,o.yg)("p",null,"A sign of life that all Acurast Processors emit in the form of a transaction that is sent to the Acurast blockchain. The heartbeat information also contains the results of a new benchmark test. Usually heartbeat is emitted and recorded once per cycle, which is three times per epoch. If a processor is offline, it will not emit heartbeats."))}m.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>h});var r=a(6540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(a),g=o,h=u["".concat(s,".").concat(g)]||u[g]||m[g]||n;return a?r.createElement(h,i(i({ref:t},c),{},{components:a})):r.createElement(h,i({ref:t},c))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,i=new Array(n);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<n;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"}}]);