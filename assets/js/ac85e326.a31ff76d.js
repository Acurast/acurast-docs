"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6426],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),u=a,y=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(8168),a=(t(6540),t(5680));t(1653),t(6025);const o={title:"Deployments On Demand",slug:"/developers/on-demand-deployments"},s=void 0,i={unversionedId:"developers/on-demand-deployments",id:"developers/on-demand-deployments",title:"Deployments On Demand",description:"On demand deployments are special kind of deployments that can be used to access a processor on demand from a dapp. This is achieved by having the deployment open a websocket connection to the acurast websocket service and setup handlers to process incoming messages.",source:"@site/docs/developers/on-demand-deployments.mdx",sourceDirName:"developers",slug:"/developers/on-demand-deployments",permalink:"/developers/on-demand-deployments",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/developers/on-demand-deployments.mdx",tags:[],version:"current",frontMatter:{title:"Deployments On Demand",slug:"/developers/on-demand-deployments"},sidebar:"docs",previous:{title:"Deployment Runtime Environment",permalink:"/developers/deployment-runtime-environment"},next:{title:"Become an Acurast Compute Provider",permalink:"/processors/become-compute-provider"}},c={},l=[{value:"On Demand deployment script",id:"on-demand-deployment-script",level:3},{value:"dApp integration",id:"dapp-integration",level:3},{value:"Acurast websocket service",id:"acurast-websocket-service",level:3}],p={toc:l},d="wrapper";function m({components:e,...n}){return(0,a.yg)(d,(0,r.A)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"On demand deployments are special kind of deployments that can be used to access a processor on demand from a dapp. This is achieved by having the deployment open a websocket connection to the acurast websocket service and setup handlers to process incoming messages."),(0,a.yg)("h3",{id:"on-demand-deployment-script"},"On Demand deployment script"),(0,a.yg)("p",null,"The snippet below shows a very simple on demand deployment script that setups a websocket connection to the acurast websocket service and registers a payload handler that just sends back the message it receives."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'_STD_.ws.open(\n  // open a websocket connection to the provided server\n  ["wss://ws-1.ws-server-1.acurast.com", "wss://ws-1.ws-server-2.acurast.com "],\n  () => {\n    print("open: success");\n    _STD_.ws.registerPayloadHandler((payload) => {\n      // register a handler for incoming messages\n      _STD_.ws.send(payload.sender, payload.payload); // just send back the received message\n    });\n  },\n  (err) => {\n    print("open: error " + err);\n  }\n);\n')),(0,a.yg)("p",null,"An on demand deployment should be scheduled with a long duration since the deployment needs to continuously run in order to be able to process incoming messages."),(0,a.yg)("h3",{id:"dapp-integration"},"dApp integration"),(0,a.yg)("p",null,"A dApp can start interacting with a running on demand deployment by integrating the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-typescript-sdk"},"Acurast Typescript SDK"),". See the example dapp for on how a simple integration works."),(0,a.yg)("h3",{id:"acurast-websocket-service"},"Acurast websocket service"),(0,a.yg)("p",null,"The Acurast websocket service is a P2P service that allows to simply send messages to clients connected to it. Clients are authenticated during the initial connection setup by signing a challenge with their private key (in case of a processor, that would be the private key specifically generated for the deployment creator)."),(0,a.yg)("p",null,"The initial connection setup and authentication flow is as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Client sends an ",(0,a.yg)("inlineCode",{parentName:"li"},"init")," message to the websocket service."),(0,a.yg)("li",{parentName:"ul"},"Websocket service responds with a ",(0,a.yg)("inlineCode",{parentName:"li"},"challenge")," message, providing the bytes to be signed."),(0,a.yg)("li",{parentName:"ul"},"Client creates the payload to sign by concatenating the ",(0,a.yg)("inlineCode",{parentName:"li"},"challenge")," bytes, the client public key and a 16 bytes nonce."),(0,a.yg)("li",{parentName:"ul"},"Client signs the payload and responds to the challenge by sending beck the signature alongside the originally received challenge bytes, client public key and nonce."),(0,a.yg)("li",{parentName:"ul"},"Websocket service verifies the signature and if it is valid accepts the connection.")),(0,a.yg)("p",null,"After a client is authenticated, it can be addressed by specifying its public key as the recipient."))}m.isMDXComponent=!0}}]);